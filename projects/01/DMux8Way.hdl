// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0 , 0 , 0 ,  0 , 0 , 0 , 0 } if sel == 000
 *                            {0 , in, 0 , 0 ,  0 , 0 , 0 , 0 } if sel == 001
 *                            {0 , 0 , in, 0 ,  0 , 0 , 0 , 0 } if sel == 010
 *                            {0 , 0 , 0 , in,  0 , 0 , 0 , 0 } if sel == 011
 *                            {0 , 0 , 0 , 0 ,  in, 0 , 0 , 0 } if sel == 110
 *                            {0 , 0 , 0 , 0 ,  0 , in, 0 , 0 } if sel == 101
 *                            {0 , 0 , 0 , 0 ,  0 , 0 , in, 0 } if sel == 110
 *                            {0 , 0 , 0 , 0 ,  0 , 0 , 0 , in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:
    //先用sel[2] 将左右分为相同的
    DMux(in=in, sel=sel[2], a=left1, b=right1);
    DMux(in=in, sel=sel[2], a=left2, b=right2);
    DMux(in=in, sel=sel[2], a=left3, b=right3);
    DMux(in=in, sel=sel[2], a=left4, b=right4);
    // 此时左右将为 in in in in 0 0 0 0 或
    // 0 0 0 0 in in in in
    // 将左和右穿进去 用sel[1]将4个的左右分开
    DMux(in=left1,  sel=sel[1], a=left11,  b=left13);
    DMux(in=left1,  sel=sel[1], a=left12,  b=left14);
    DMux(in=right1, sel=sel[1], a=right11, b=right13);
    DMux(in=right1, sel=sel[1], a=right12, b=right14);
    //此时将是两两一样的   并且其中只会有一对in in
    DMux(in=left11,  sel=sel[0], a=a, b=b); //left11 = left 12
    DMux(in=left13,  sel=sel[0], a=c, b=d); //left13 = left14
    DMux(in=right11, sel=sel[0], a=e, b=f);
    DMux(in=right13, sel=sel[0], a=g, b=h);
}